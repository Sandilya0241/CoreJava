======================================================================================================================================================================================================
======================================================================================================================================================================================================
																					PriorityQueue:
======================================================================================================================================================================================================
======================================================================================================================================================================================================

1.	If we want to represent a group of individual objects Prior to processing according to some Priority, then we should go for PriorityQueue.
2.	The Priority can be either Default Natural Sorting Order or Customized sorting order defined by Comparator.
3.	Insertion order is not preserved and it is based on some priority.
4.  Duplicate objects are not allowed.
5. 	If we are depending on Default Natural Sorting Order, compulsory objects should be Homogeneous and Comparable. Otherwise, we will get runtime exception saying "ClassCastException".
6.  If we are defining our own Sorting by Comparator, then objects need not be Homogeneous and Comparable.
7. 	Null is not allowed even as the first element also.

======================================================================================================================================================================================================
																					Constructors:
======================================================================================================================================================================================================

PriorityQueue q = new PriorityQueue();
	Creates an empty PriorityQueue with 
		default initial capacity : 11
	and all objects will be inserted according to Default Natural Sorting Order.

PriorityQueue q = new PriorityQueue(int intialCapacity);
PriorityQueue q = new PriorityQueue(int intialCapacity, Comparator c);
PriorityQueue q = new PriorityQueue(SortedSet s);
PriorityQueue q = new PriorityQueue(Collection c);


	Ex:
		package com.learnjava.collections;

		import java.util.PriorityQueue;
		
		public class PriorityQueueDemo {
			public static void main(String[] args) {
				PriorityQueue p = new PriorityQueue();
				System.out.println(p.peek());
				//System.out.println(p.element());		// Runtime Exception :  NOSuchElementFoundException
				for (int i = 0; i <= 10; i++) {
					p.offer(i);
				}
				System.out.println(p);
				System.out.println(p.poll());
				System.out.println(p);
			}
		}
			
	O/P:
		null
		[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
		0
		[1, 3, 2, 7, 4, 5, 6, 10, 8, 9]	
		
Note:
	Some platforms won't provide proper support for thread priorities and PriorityQueues.
	

	
	Ex 2:
	
		package com.learnjava.collections;
		import java.util.Comparator;
		import java.util.PriorityQueue;
		public class PriorityQueueDemo2 {
			public static void main(String[] args) {
				PriorityQueue p = new PriorityQueue(15, new MyComparator16());
				p.offer("A");
				p.offer("Z");
				p.offer("L");
				p.offer("B");
				System.out.println(p);
			}
		}
		class MyComparator16 implements Comparator {
			public int compare(Object o1, Object o2) {
				String s1 = o1.toString();
				String s2 = o2.toString();
				return s2.compareTo(s1);
			}
		}
	O/P:
		[Z, B, L, A]