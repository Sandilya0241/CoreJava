TreeSet : 
=============================================

	a. The underlying data structure is BalancedTree.
	b. Duplicate objects are NOT allowed.
	c. Insertion order NOT preserved.
	d. Heterogeneous objects are NOT allowed. Otherwise, we will get runtime saying "ClassCast Exception".
	e. Null insertion possible (only once).
	f. TreeSet implements Serializable and Cloneable but NOT RandomAccess.
	g. All objects will be inserted based on some sorting order. It may be default natural sorting order or customized sorting order.
	
	
	Constructor :
	=========================================
		
		TreeSet ts = new TreeSet();
		It creates an empty TreeSet object where elements will be inserted according to Default Natural Sorting Order.
		
		TreeSet ts = new TreeSet (Comparator c);
		It creates an empty TreeSet object here elements will be inserted according to Customized Sorting Order specified by Comparator object.
		
		TreeSet ts = new TreeSet (Collection c);
		TreeSet ts = new TreeSet (SortedSet s);
		
		
	Null Acceptance:
	=========================================
	a. For non-empty TreeSet, if we are trying to insert NULL, then we will get NullPointer Exception.
	
	b. For empty TreeSet, as a first element NULL is allowed. But after inserting that NULL, if we are trying to insert any other element, then we will be getting rimetime exception saying NullPointer Exception.
	
	
	Note : ***********************************
	
	Until 1.6 version, NULL is allowed as a first element to the empty TreeSet. But from 1.7 version onwards Null is NOT allowed even as the first element (i.e., Null such type of story, not applicable for TreeSet from 1.7 Version).
	
	
	TreeSetExample002:
	==========================================
	If we are depending on DEFAULT NATURAL SORTING ORDER compulsory objects should be Homogeneous and Comparable. Else, we might encounter runtime exception "ClassCastException".
	An object is said to be Comparable if and only if, corresponding class implements Comparable Interface.
	String class and Wrapper classes (toString(), toFloat()) already implement Comparable Interface. But StringBuffer class doesn't implement Comparable interface. Hence, we encountered ClassCastException.



Write a program to insert Integer objects into the TreeSet where the sorting order is descending order.
Program :
=========================================
		package com.learnjava.collections;
		
		import java.util.Comparator;
		import java.util.TreeSet;
		
		class MyComparator implements Comparator {
			public int compare(Object o1, Object o2) {
				Integer I1 = (Integer)o1;
				Integer I2 = (Integer)o2;
				
				if (I1 > I2) {
					return -1;
				} else if (I1 < I2){
					return 1;
				}
				else {
					return 0;
				}
			}
		}
		
		public class TreeSetExample003 {
			public static void main(String[] args) {
				System.out.println("Cutomized sorting order");
				System.out.println("=====================================================");
				TreeSet t = new TreeSet(new MyComparator());
				t.add(10);
				t.add(0);
				t.add(15);
				t.add(5);
				t.add(20);
				t.add(20);
				System.out.println(t);
				System.out.println("");
				
				System.out.println("Default sorting order");
				System.out.println("=====================================================");
				
				t = new TreeSet();
				t.add(10);
				t.add(0);
				t.add(15);
				t.add(5);
				t.add(20);
				t.add(20);
				System.out.println(t);
			}
		}

		O/P:
		========================================
		Cutomized sorting order
		=====================================================
		[20, 15, 10, 5, 0]
		
		Default sorting order
		=====================================================
		[0, 5, 10, 15, 20]



Explanation:
=====================================================


TreeSet t = new TreeSet(new MyComparator());	==> 1                                                          
t.add(10);	==> First element. So, no comparision.                                           ____ 
                                                                                            |_10_|
t.add(0); --[+ve]---> compare(0, 10)                                                         / \
                                                                                         ___/   \__
                                                                                        |_15|   |0_| 
t.add(15);--[-ve]---> compare(15,10)                                                     /      / 
                                                                                     ___/    __/
            +--[+ve]--> compare(5, 10)                                              |20_|   |5_| 
t.add(5); --|
            +--[-ve]--> compare(5, 0)


            +--[-ve]--> compare(20, 10)    
t.add(20);--|
            +--[-ve]--> compare(20, 15)

 
            +--[-ve]--> compare(20, 10) 
            | 
t.add(20);--+--[-ve]--> compare(20, 15)
            |
            +--[ 0 ]--> compare(20, 20)
            

At line 1, if we are not passing Comparator object then internally JVM will call compareTo() method, which is meant for Default Natural Sorting Order.
In this case, the output is :
	[0, 5, 10, 15, 20]

	
At line 1, if we are passing Comparator object, then JVM will call compare() method, which is meant for Customized Sorting.
In this case, the output is :
	[20, 15, 10, 5, 0]
	
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
																			Various possible implementations of Compare method
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



Program:
=============================================
	
package com.learnjava.collections;

import java.util.Comparator;
import java.util.TreeSet;

class MyComparator2 implements Comparator {
	String method;
	MyComparator2(String methodName) {
		this.method = methodName;
	}
	
	public int compare(Object o1, Object o2) {
		
		if(method.equals("Method1")) {
			Integer I1 = (Integer)o1;
			Integer I2 = (Integer)o2;
			return I1.compareTo(I2);
		} else if(method.equals("Method2")) {
			Integer I1 = (Integer)o1;
			Integer I2 = (Integer)o2;
			return -I1.compareTo(I2);
		}  else if(method.equals("Method3")) {
			Integer I1 = (Integer)o1;
			Integer I2 = (Integer)o2;
			return I2.compareTo(I1);
		} else if(method.equals("Method4")) {
			Integer I1 = (Integer)o1;
			Integer I2 = (Integer)o2;
			return -I2.compareTo(I1);
		} else if(method.equals("Method5")) {
			return 99;
		} else if(method.equals("Method6")) {
			return -1000;
		} else {
			return 0;
		}
		
		
	}
}

public class TreeSetExample4 {
	public static void main(String[] args) {
		System.out.println("Method 1");
		System.out.println("I1.compareTo(I2) ==> Default Natural Sorting Order - Ascending order");
		System.out.println("Output should be [0, 5, 10, 15, 20]");
		System.out.println("===================================================================================");
		TreeSet t = new TreeSet(new MyComparator2("Method1"));
		t.add(10);
		t.add(0);
		t.add(15);
		t.add(5);
		t.add(20);
		t.add(20);
		System.out.println(t);
		System.out.println("");
		
		System.out.println("Method 2");
		System.out.println("-I1.compareTo(I2) ==> Descending Order");
		System.out.println("Output should be [20, 15, 10, 5, 0]");
		System.out.println("===================================================================================");
		t = new TreeSet(new MyComparator2("Method2"));
		t.add(10);
		t.add(0);
		t.add(15);
		t.add(5);
		t.add(20);
		t.add(20);
		System.out.println(t);
		
		System.out.println("Method 3");
		System.out.println("I2.compareTo(I1) ==> Descending Order");
		System.out.println("Output should be [20, 15, 10, 5, 0]");
		System.out.println("===================================================================================");
		t = new TreeSet(new MyComparator2("Method3"));
		t.add(10);
		t.add(0);
		t.add(15);
		t.add(5);
		t.add(20);
		t.add(20);
		System.out.println(t);
		
		System.out.println("Method 4");
		System.out.println("-I2.compareTo(I1) ==> Ascending Order");
		System.out.println("Output should be [0, 5, 10, 15, 20]");
		System.out.println("===================================================================================");
		t = new TreeSet(new MyComparator2("Method4"));
		t.add(10);
		t.add(0);
		t.add(15);
		t.add(5);
		t.add(20);
		t.add(20);
		System.out.println(t);
		
		System.out.println("Method 5");
		System.out.println("any poitive value ==> Insertion Order (Duplicates allowed)");
		System.out.println("Output should be [10, 0, 15, 5, 20, 20]");
		System.out.println("===================================================================================");
		t = new TreeSet(new MyComparator2("Method5"));
		t.add(10);
		t.add(0);
		t.add(15);
		t.add(5);
		t.add(20);
		t.add(20);
		System.out.println(t);
		
		System.out.println("Method 6");
		System.out.println("Any negative value ==> Reverse of Insertion Order");
		System.out.println("Output should be [20, 20, 5, 15, 0, 10]");
		System.out.println("===================================================================================");
		t = new TreeSet(new MyComparator2("Method6"));
		t.add(10);
		t.add(0);
		t.add(15);
		t.add(5);
		t.add(20);
		t.add(20);
		System.out.println(t);
		
		System.out.println("Method 7");
		System.out.println("Zero being returned from Comparator");
		System.out.println("Output should be [10]. Only first element will be inserted and all remaining will be duplicate");
		System.out.println("===================================================================================");
		t = new TreeSet(new MyComparator2("Method7"));
		t.add(10);
		t.add(0);
		t.add(15);
		t.add(5);
		t.add(20);
		t.add(20);
		System.out.println(t);
		
	}
}
	
	
O/P:
=============================

Method 1
I1.compareTo(I2) ==> Default Natural Sorting Order - Ascending order
Output should be [0, 5, 10, 15, 20]
===================================================================================
[0, 5, 10, 15, 20]

Method 2
-I1.compareTo(I2) ==> Descending Order
Output should be [20, 15, 10, 5, 0]
===================================================================================
[20, 15, 10, 5, 0]
Method 3
I2.compareTo(I1) ==> Descending Order
Output should be [20, 15, 10, 5, 0]
===================================================================================
[20, 15, 10, 5, 0]
Method 4
-I2.compareTo(I1) ==> Ascending Order
Output should be [0, 5, 10, 15, 20]
===================================================================================
[0, 5, 10, 15, 20]
Method 5
any poitive value ==> Insertion Order (Duplicates allowed)
Output should be [10, 0, 15, 5, 20, 20]
===================================================================================
[10, 0, 15, 5, 20, 20]
Method 6
Any negative value ==> Reverse of Insertion Order
Output should be [20, 20, 5, 15, 0, 10]
===================================================================================
[20, 20, 5, 15, 0, 10]
Method 7
Zero being returned from Comparator
Output should be [10]. Only first element will be inserted and all remaining will be duplicate
===================================================================================
[10]


=========================================================================================================================================================================================================================================================
=========================================================================================================================================================================================================================================================
															Write a program to insert String objects into the TreeSet where all elements should be inserted into according to reverse of alphabetical order.
=========================================================================================================================================================================================================================================================
=========================================================================================================================================================================================================================================================

package com.learnjava.collections;

import java.util.Comparator;
import java.util.TreeSet;

class MyComparator3 implements Comparator {
	public int compare(Object o1, Object o2) {
		String s1 = (String)o1;
		String s2 = o2.toString();	// For StringBuffer kind of objects
		//return s2.compareTo(s1);
		return -s1.compareTo(s2);
	}
}

public class TreeSetExample5 {
	public static void main(String[] args) {
		TreeSet t = new TreeSet(new MyComparator3());
		t.add("Roja");
		t.add("ShobhaRani");
		t.add("RajaKumari");
		t.add("GangaBhavani");
		t.add("Ramulamma");
		System.out.println(t);
	}
}


O/P:
[ShobhaRani, Roja, Ramulamma, RajaKumari, GangaBhavani]


Write a program to insert StringBuffer objects into the TreeSet where sorting order is Alphabetical order?
Program:
	package com.learnjava.collections;
	import java.util.Comparator;
	import java.util.TreeSet;
	
	class MyComparator4 implements Comparator {
		public int compare(Object o1, Object o2) {
			String s1 = o1.toString();
			String s2 = o2.toString();	// For StringBuffer kind of objects
			return s1.compareTo(s2);
		}
	}
	public class TreeSetExample6 {
		public static void main(String[] args) {
			TreeSet t = new TreeSet(new MyComparator4());
			t.add(new StringBuffer("A"));
			t.add(new StringBuffer("Z"));
			t.add(new StringBuffer("K"));
			t.add(new StringBuffer("L"));
			System.out.println(t);
		}
	}
O/P:
[A, K, L, Z]

Explanation:
--------------------------------------------------
If we are depending on Default Natural Sorting Order, compulsory objects should be "Homogeneous and Comparable", otherwise we will get runtime exception saying "ClassCastException".
If we are defining our own sorting by Comparator, then objects need not be "Comparable and Homogeneous". I.e., we can add "Heterogeneous and Non-Comparable" objects also.

Q.) Write a program to insert String and StringBuffer objects into TreeSet, where sorting order is Increasing length order. If two objects having same length, then consider their alphabetical order.

package com.learnjava.collections;
import java.util.Comparator;
import java.util.TreeSet;
class MyComparator5 implements Comparator {
	public int compare(Object o1, Object o2) {
		String s1 = o1.toString();
		String s2 = o2.toString();
		if(s1.length() > s2.length()) {
			return 1;
		} else if(s1.length() < s2.length()) {
			return -1;
		} else {
			return s1.compareTo(s2);
		}
	}
}
public class TreeSetExample7 {
	public static void main(String[] args) {
		TreeSet t = new TreeSet(new MyComparator5());
		t.add("A");
		t.add(new StringBuffer("ABC"));
		t.add(new StringBuffer("AA"));
		t.add("XX");
		t.add("ABCD");
		t.add("A");
		System.out.println(t);
	}
}

/*	Output
 * 	[A, AA, XX, ABC, ABCD]
 * 
 */
 
 =================================================================================================================================================================================================================
 																Program on own class sorting
 =================================================================================================================================================================================================================
 
 Employee.java
 =========================
			package com.learnjava.collections;
			public class Employee implements Comparable{
				String empName;
				int empID;
				Employee(String empName, int empID) {
					this.empName = empName;
					this.empID = empID;
				}
				public String toString() {
					return empName + " - " + empID;
				}
				public int compareTo(Object Obj1) {
					Employee e1 = (Employee)Obj1;
					if(empID > e1.empID) {
						return 1;
					} else if(empID < e1.empID) {
						return -1;
					} else {
						return 0;
					}
				}
			}
 
EmployeeClient
=========================
			package com.learnjava.collections;
			import java.util.Comparator;
			import java.util.TreeSet;			
			public class EmployeeClient {
				public static void main(String[] args) {
					Employee e1 = new Employee("Nag", 100);
					Employee e2 = new Employee("Balaiah", 200);
					Employee e3 = new Employee("Chiru", 50);
					Employee e4 = new Employee("Venky", 150);
					Employee e5 = new Employee("Nag", 100);
					TreeSet t = new TreeSet();
					t.add(e1);
					t.add(e2);
					t.add(e3);
					t.add(e4);
					t.add(e5);
					System.out.println(t);					
					t = new TreeSet(new MyComparator6());
					t.add(e1);
					t.add(e2);
					t.add(e3);
					t.add(e4);
					t.add(e5);
					System.out.println(t);
				}
			}
			class MyComparator6 implements Comparator {
				public int compare(Object obj1, Object obj2) {
					Employee e1 = (Employee) obj1;
					Employee e2 = (Employee) obj2;		
					String s1 = e1.empName;
					String s2 = e2.empName;
					return s1.compareTo(s2);
				}
			}
			
O/P:
	[Chiru - 50, Nag - 100, Venky - 150, Balaiah - 200]
	[Balaiah - 200, Chiru - 50, Nag - 100, Venky - 150] 
 
 