===================================================================================================================================================================================================
===================================================================================================================================================================================================
																					PROPERTIES
===================================================================================================================================================================================================
===================================================================================================================================================================================================

I.		The underlying data structure for Hashtable is "Hashtable".
II.		Insertion order is not preserved and it is based on hashcode of Keys.
III.	Duplicate Keys are not allowed and Values can be duplicated.
IV.		Heterogeneous objects are allowed for both Keys and Values.
V.		Null is not allowed for both Key and Value. Otherwise, we will get runtime exception saying, "NullPointerException".
VI.		It implements Serializable and Cloneable Interfaces but not RandomAccess.
VII.	Every method present in Hashtable is synchronized and hence, Hashtable object is thread-safe.
VIII.	Hashtable is the best choice, if our frequent operation is search operation.


===================================================================================================================================================================================================
																					Constructors:
===================================================================================================================================================================================================

Hashtable h = new Hashtable();

	Creates an empty Hashtable object with 
		default initial capacity : 11 
		default fill ratio : 0.75.
		
Hashtable h = new Hashtable (int initialcapacity);
Hashtable h = new Hashtable (int initialcapacity, float fillratio);
Hashtable h = new Hashtable (Map m);

****************************************************************************************************************************************************************************************************
	Example:
****************************************************************************************************************************************************************************************************
			package com.learnjava.collections;
			import java.util.Hashtable;
			public class HashTableDemo {
				public static void main(String[] args) {
					Hashtable h = new Hashtable();
					h.put(new Test15(5), "A");
					h.put(new Test15(2), "B");
					h.put(new Test15(6), "C");
					h.put(new Test15(15), "D");
					h.put(new Test15(23), "E");
					h.put(new Test15(16), "F");
					//h.put(new Test15(17), null);
					//h.put(null, "K");
					System.out.println(h);
				}
			}
			class Test15 {
				int i;
				Test15(int i) {
					this.i = i;
				}
				public int hashCode() {
					return i;
				}
				public String toString() {
					return i + "";
				}
			}


****************************************************************************************************************************************************************************************************
	O/P:
		{6=C, 16=F, 5=A, 15=D, 2=B, 23=E}
****************************************************************************************************************************************************************************************************
   From top to bottom, inside bucket from right to left.
											   	                            ______________
															10 |              |
															   |______________|
h.put(new Test15(5), "A");  hashCode : 5                       						(bucket 5)--+	 9 |              |
h.put(new Test15(2), "B");  hashCode : 2                 					(bucket 2)-----+    |      |______________|
h.put(new Test15(6), "C");  hashCode : 6                 			                (bucket 6)--+  |    | 	 8 |              |
h.put(new Test15(15), "D"); hashCode : 15. no bucket 15, (15%11) = 4 =>                     (bucket 4)---+  |  |    | 	   |______________|
h.put(new Test15(23), "E"); hashCode : 23. (23%11) = 1 =>                    (bucket 1) ------------+    |  |  |    |    7 |              |
h.put(new Test15(16), "F");	hashCode : 16. (16%11) = 5 =>                   (bucket 5) ------+  |    |  |  |    |	   |______________|
										                 |  |    |  +--+----+--> 6 | 6=C          |
											         |  |    |     |    |	   |______________|
					                                                         +--+----+-----+----+--> 5 | 5=A, 16=F    |
												    |	 |     |	   |______________|
					                                                            |    +-----+-------> 4 | 15=D         |
												    |          |	   |______________|
									                            |          |         3 |              |
							                                            |          |	   |______________|
											            |          +-------> 2 | 2=B          |
						                                                    |                      |______________|
						                                                    +------------------> 1 | 23=E         |
														           |______________|
															 0 |              |
														           |______________|															
													

If we change hashCode method of Test15 class as 

public int hashCode() {
	return i%9;
}

Output will be :

{16=F,15=D,6=C,23=E,5=A,2-B}
											   	                            ______________
															10 |              |
															   |______________|
h.put(new Test15(5), "A");  hashCode : 5 % 9 = 5 (bucket 5)---------------------------------------------------------+	 9 |              |
h.put(new Test15(2), "B");  hashCode : 2 % 9 = 2 (bucket 2)----------------------------------------------------+    |      |______________|
h.put(new Test15(6), "C");  hashCode : 6 % 9 = 6 (bucket 6)-------------------------------------------------+  |    | 	 8 |              |
h.put(new Test15(15), "D"); hashCode : 15. no bucket 15, (15%9) = 6 (bucket 6)---------------------------+  |  |    |      |______________|
h.put(new Test15(23), "E"); hashCode : 23. (23%9) = 5 (bucket 1)------------------------------------+    |  |  |    |    7 | 16=F         |
h.put(new Test15(16), "F");	hashCode : 16. (16%9) = 7 (bucket 7)-----------------------------+  |    |  |  |    |	   |______________|
										                 |  |    |  +--+----+--> 6 | 6=C,15=D     |
											         |  |    |     |    |	   |______________|
					                                                         +--+----+-----+----+--> 5 | 5=A, 23=E    |
												    |	 |     |	   |______________|
					                                                            |    +-----+-------> 4 |              |
												    |          |	   |______________|
									                            |          |         3 |              |
							                                            |          |	   |______________|
											            |          +-------> 2 | 2=B          |
						                                                    |                      |______________|
						                                                    +------------------> 1 |              |
														           |______________|
															 0 |              |
														           |______________|															
													

													
================================================================================================================================================================


Hashtable h = new Hashtable(25);
h.put(new Test15(5), "A");
h.put(new Test15(2), "B");
h.put(new Test15(6), "C");
h.put(new Test15(15), "D");
h.put(new Test15(23), "E");
h.put(new Test15(16), "F");  

{23=E,16=F,15=D,6=C,5=A,2=B}