Collection (Interface) :
=================================================

1. If we want to represent a group of individual objects as a single entity, then we should go for Collection.
2. It defines the most common methods, which are applicable for any collection object.


boolean add (Object o)
boolean addAll (Collection c)
boolean remove (Object o)
boolean removeAll (Collection c)
boolean retainAll (Collection c) = To remove all objects except those available in c.
void clear ()
boolean contains (Object o)
boolean containsAll (Collection c)
boolean isEmpty ()
int size ()
Object[] toArray()
Iterator iterator()

There is no concrete class which implements Collection interface directly.

++++++++++++++++++++++++++++++++++++++++++++++++++++

List (Interface) :
=================================================
1. List is child interface of Collection.
1. If we want to represent a group of individual objects as a single entity where duplicates are allowed and insertion order must be preserved, then we should go for Collection.

We can preserve insertion order using Index and we can differentiate duplicate objects by using index. Hence, index will play very important role in List.

List interface define, the following specific methods:
=========================================================

void add (int index, Object o);
boolean addAll()(int index, Collection o);
Object get(int index);
Object remove(int index);
Object set(int index, Object new); ==> This is to replace the element present at specified index with provided Object and returns old object.
int indexOf(Object o) ==> Returns index of first occurrence of 'o'.
int lastIndexOf(Object o)
ListIterator listIterator();

Implementation classes : 
ArrayList
LinkedList
Vector
Stack


ArrayList:
=====================================================

	1. The underlying data structure is Resizable Array / Growable Array.
	2. Duplicates are allowed.
	3. Insertion order is preserved.
	4. Heterogeneous objects are allowed (Except TreeSet and TreeMap, everywhere Heterogeneous objects are allowed).
	5. Null insertion is possible.

	Constructors :
	
	1. ArrayList l = new ArrayList();
	
	Create an empty ArrayList object with default initial capacity with 10. Once ArrayList reaches its maximum capacity, then the new ArrayList object will be created with below formula:
	
												New Capacity = (Current Capacity * 3 / 2) + 1
	
	
	2. ArrayLlist l = new ArrayList(int capacity);
	
	Creates an empty ArrayList object with specified initial capacity.
	
	
   3. ArrayList l = new ArrayList(Collection c);
   
   Creates an equivalent ArrayList object for the given Collection.
   
   
   
Usually we can use Collections (Container as per C++) to hold and transfer objects from one location to another location. To provide support for this requirement every collection class by default implements Serializable and Clonable Interfaces. 

ArrayList and Vector classes implements RandomAccess Interface. So that any random element we access with the same speed.

RandomAccess : java.util
+++++++++++++++++++++++++++++++++++++++++++

RandomAccess interface present in java.util package and it doesn't contain methods. It's a marker interface where required ability will be provided automatically by JVM.


ArrayList is the best choice, if our frequent operation is retrieval because ArrayList implements RandomAccess Interface.
ArrayList is the worst choice, if our frequent operation is insertion/ deletion in the middle.


Arrays                                                                                                    |Vector
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
1. Every method present in the ArrayList is Non-Synchronized                                              |1. Every method present in the Vector is Synchronized
2. At a time multiple threads are allowed to operate on ArrayList and hence it is not Thread-safe         |2. At a time only one threads is allowed to operate on Vector and hence it is Thread-safe
3. Relatively performance is high because threads are not required to wait to operate on ArrayList Object |3. Relatively performance is low because threads are required to wait to operate on Vector Object
4. Introduced in 1.2 Version and it is non Legacy                                                         |4. Introduced in 1.0 Version and it is Legacy


Q. How to get Synchronized version of ArrayList object?
A. By default ArrayList is Non-Synchronized. But we can get Synchronized version of ArrayList object by using "SynchronizedList" method of Collections class.

public static List synchronizedList(List l);


Similarly we can get synchronized version of Set and Map objects by using the following methods of Collections class:
	public static Set synchronizedSet(Set s);
	public static Map synchronizedMap(Map m);
