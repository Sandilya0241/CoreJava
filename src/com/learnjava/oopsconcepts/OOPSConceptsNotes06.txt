==============================================================================================================================================================================
==============================================================================================================================================================================
==============================================================================================================================================================================
															COUPLING
==============================================================================================================================================================================
==============================================================================================================================================================================
==============================================================================================================================================================================

The degree of dependency between the components is called coupling. If dependency is more, then it is considered as "Tightly Coupled" and if dependency is less, then it is 
considered as "Loosely Coupled".

public class OOPSConceptsLesson09 {
	public static void main(String[] args) {
		System.out.println(A.i);
	}
}

class A {
	static int i = B.j;
}

class B {
	static int j = C8.k;
}

class C8 {
	static int k = D.m1();
}

class D {
	static int m1() {
		return 10;
	}
}

The above components are said to be Tightly Coupled with each other, because dependency between the components is more. 
Tightly coupling is not a good programming practice, because it has several serious disadvantages:

I.		Without effecting remaining components, we can't modify any component and hence, will become difficult.
II.		It suppresses re-usability.
III.	It reduces maintainability of the application.

Hence, we have to maintain, dependency between the components as less as possible. I.e., Loosely Coupled is a good programming practice.

==============================================================================================================================================================================
==============================================================================================================================================================================
==============================================================================================================================================================================
																	COHESION
==============================================================================================================================================================================
==============================================================================================================================================================================
==============================================================================================================================================================================

For every component a clear well-defined functionality is defined, then that component is said to be follow "High Cohesion".	



	_________________________
   |                         |  
   |                         |
   |	Login page display   |
   |                         |                                                                                  __________
   |	Validation           |                                                                             ____|          |
   |	                     |                                                  ___________________       |    | Inbox.jsp|
   |	Inbox page           |                                  ___________    |               ----+------|    |__________|        
   |                         |                                 |         --+---|                   |   
   |	Reply page           |                                 | Login.jsp |   | Validation servlet|
   |                         |								   |___________|   |				   |  	
   |	Compose Page         |                                                 |___________________|
   |                         |
   |	Error Page           |  
   |                         |
   |	...                  |	70 lakh lines of Code 
   |                         |	
   |_________________________|											High Cohesion
   
   		Low Cohesion
   		
   		
High cohesion is always a good programming practice, it has several advantages:
I.		Without effecting remaining components, we can modify any component. Hence, enhancement will become easy.
II.		It promotes re-usability of the code (where ever validation is required, we can re-use the same validateservlet without re-writing).
III.	It improves maintainability of the application.


Note:
Loosely Coupled and High-Cohesion are good programming practices.


==============================================================================================================================================================================
==============================================================================================================================================================================
==============================================================================================================================================================================
																	OBJECT TYPE CASTING
==============================================================================================================================================================================
==============================================================================================================================================================================
==============================================================================================================================================================================

We can use Parent reference to hold Child object. 
Ex:	

	Object o = new String("Sandy");
	
We can use Interface reference to hold implemented class object.
Ex:
	
	Runnable r = new Thread();
	
					_____________________________________________________
				   |                                                     |              
				   |              |----- Class/ Interface name           |                                      	
				   |              |                                      | 
				   |              |  |---- Name of reference variable    |
				   |	A 	b  = (C) d;                                  |
	               |    |   |                                            |
				   |    |   |---Name of reference variable               |
				   |    |----- Class/ Interface name                     |
				   |_____________________________________________________|


Mantra I (Compile-time checking 1) :
+++++++++++++++++++++++++++++++++++++++++++++++++++++++

The type of 'd' and 'C' must have some relation(Either Child-Parent or Parent-Child or Same type) otherwise we will get compile-time error saying 

	"Inconvertible type; found : d, required C".
	
	Example 1: Valid
		Object o = new String("Sandy");
		StringBuffer sb = (StringBuffer) o;
	
	Example 2: Invalid
		String s = new String("Sandy");
		StringBuffer sb1 = (StringBuffer) s; //CE: inconvertible type. Found : java.lang.String; Required: java.lang.StringBuffer
	

Mantra II (Compile-time checking 2) :
+++++++++++++++++++++++++++++++++++++++++++++++++++++++

'C' must be either same or derived type of 'A'. Otherwise, we will get compile-time error, saying 

	"Incompatible types; Found : C; Required : A".
	
	Example 1: Valid
		Object o = new String("Sandy");
		StringBuffer sb = (StringBuffer) o;
	
	Example 1: Valid
		Object o = new String("Sandy");
		StringBuffer sb = (String) o; //CE: incompatibility type. Found : java.lang.String; Required: java.lang.StringBuffer


Mantra III (Run-time checking 1) :
+++++++++++++++++++++++++++++++++++++++++++++++++++++++
Runtime object type of 'd' must be either same or derived type of 'C'. Otherwise we will get runtime exception saying:
	"ClassCastException"
	
	Example 1: Invalid
		Object o = new String("Sandy");
		StringBuffer sb = (StringBuffer) o;
	
	// RE : ClassCastException : java.lang.String cannot be cast to java.lang.StringBuffer.
	
	Example 2: Valid
		Object o = new String("Sandy");
		Object o1 = (String) o;
		



						Object
						  |
						  |
						 / \ 
	                    /   \
	                   /     \
	               Base1    Base2
	                 |        | 
	                 |       / \
	                 |	    /   \
	                 |    Der3	Der4
	                / \  	
                 Der1 Der2
         
         
Which of the following is true?

			Base2 b = new Der4();
	
	I.		Object o = (Base2) b;	Valid
	II.		Object o = (Base1) b;	CE: Inconvertible Required : Base1 Found : Base2
	III.	Object o = (Der3) b;	Runtime : ClassCastException
	IV.		Base2 o = (Base1) b;	CE: Inconvertible Required : Base1 Found : Base2
	V.		Base1 o = (Der4) b;		CE: Incompatible Required : Base1 Found : Der4
	VI. 	Base1 b1 = (Der1) b;	CE: Inconvertible Required : Der1 Found : Base2
                 

                 
                 
Strictly speaking through type casting, we are not creating any new object. For the existing object, we are providing another type of reference variable. i.e., we are performing
type casting but not object casting.

String s = new String("Sandy");		|
                                    |--------- Object o = new String("Sandy");
Object o = (Object)s;               |



                      _________________
Object	-------------|                 |
                     | String("Sandy") |
String --------------|_________________|



												Integer I = new Integer(10);	|------ Number n = new Integer(10);
	Object	o = new Integer(10);	----|		Number n = (Number) I;          |    
										|		Object o = (Object) n;




                      _________________
Integer	-------------|                 |
Number --------------| String("Sandy") |
Object --------------|_________________|




++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Note: 

				A
				^
				|
				|
				B
				^
				|
				|
				C
		
		C c = new C();
		B b = new C();	==> (B)c
		A a = new C();  ==> (A)((B)c)
		
		
Ex 1:

	class P {
		public void m1() {
		}
	}
	
	class C extends P {
		public void m2() {
		}
	}

	C c = new C();
	Which method calls are valid?
	
	A.	c.m1();			Valid
	B.	c.m2(); 		Valid
	C.	((P)c).m1();	Valid		[((P)c) => P p = new C();]
	D.  ((P)c).m2();	Invalid		[((P)c) => P p = new C();]
	
	Parent reference can be used to hold Child Object. But by using that reference, we cannot call Child specific methods. And we can call only methods available in Parent class.
	
	
	
Ex 2:

	class A {
		public void m1() {
			System.out.println("A");
		}
	}
	
	class B extends A {
		public void m1() {
			System.out.println("B");
		}
	}
	
	class C extends B {
		public void m1() {
			System.out.println("C");
		}
	}

	C c = new C();
	What is the output for below cases?
	
	A.	c.m1();				O/P : C
	B.	((B)c).m1()			O/P : C
	C.	((A)((B)c)).m1()	O/P : C
	
	It is Overriding and method resolution is always based on run-time object.

Ex 3:

	class A {
		public static void m1() {
			System.out.println("A");
		}
	}
	
	class B extends A {
		public static void m1() {
			System.out.println("B");
		}
	}
	
	class C extends B {
		public static void m1() {
			System.out.println("C");
		}
	}

	C c = new C();
	What is the output for below cases?
	
	A.	c.m1();				O/P : C
	B.	((B)c).m1()			O/P : B
	C.	((A)((B)c)).m1()	O/P : A
	
	It is Method Hiding and method resolution is always based on reference type.

Ex 4:

	class A {
		int x = 777;
	}
	
	class B extends A {
		int x = 888;
	}
	
	class C extends B {
		int x = 999;
	}

	C c = new C();
	What is the output for below cases?
	
	A.	c.m1();				O/P : 999
	B.	((B)c).m1()			O/P : 888
	C.	((A)((B)c)).m1()	O/P : 777
	
	Variable resolution is always based on reference type but not based on run-time object.

