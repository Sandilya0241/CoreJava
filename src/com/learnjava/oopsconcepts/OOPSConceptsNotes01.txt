---OOPSConceptsNotes01


==========================================================
Encapsulation	1.)	Data hiding.                         |
				2.) Abstraction.                         |
				3.) Encapsulation.                       |
				4.) Tightly encapsulated classes.        |
==========================================================
Inheritance		5.) Is-A relationship.                   |
==========================================================
				6.) Has-A relationship.
==========================================================
Polymorphism	7.) Method signature.                    | 
				8.)	Overloading.                         |  
				9.) Overriding.                          |
==========================================================
				10.) Static control flow.
				11.) Instance control flow.
				12.) Constructors.
				13.) Coupling.
				14.) Cohesion.
				15.) Type-casting.
__________________________________________________________				
				

				
==============================================================================================================================================================================
==============================================================================================================================================================================
==============================================================================================================================================================================
																	DATA HIDING
==============================================================================================================================================================================
==============================================================================================================================================================================
==============================================================================================================================================================================

Outside person cannot access our internal data directly or our internal data should not go out directly. This OOP feature is nothing but "Data hiding".
After validation/ authentication outside person can access our internal data.
	Ex:	1.	After providing proper username & password, we can able to access our GMAIL inbox information.
		2.	Even though we are valid customer of the back, we can able to access our account information. And we can't access others account information.


By declaring data member(variable) as private we can achieve "Data hiding".

public class Account {
	private double balance;
	public double getBalance(){
		return balance;
	}
}


The main advantage of "Data hiding" is security.

Note: It is highly recommended to declare data member(variable) as "private".


==============================================================================================================================================================================
==============================================================================================================================================================================
==============================================================================================================================================================================
																	ABSTRACTiON
==============================================================================================================================================================================
==============================================================================================================================================================================
==============================================================================================================================================================================

Hiding internal implementation and just highlight the set of services what we are offering, is the concept of Abstraction.
Ex:
	Through Bank ATM GUI screen, bank people are highlighting the set of services what they are offering without highlighting internal implementation.
	
The main advantages of abstraction are:
	I.		We can achieve "Security", because we are not highlighting our internal implementation.
	II.		Without affecting outside person, we can able to perform any type of changes in our system and hence, enhancement will become easy.
	III.	It improves "Maintainability" of the application.
	IV.		It improves "Easiness" to use our system.
	
By using Interface and Abstract classes, we can implement Abstraction.


==============================================================================================================================================================================
==============================================================================================================================================================================
==============================================================================================================================================================================
																	ENCAPSULATION
==============================================================================================================================================================================
==============================================================================================================================================================================
==============================================================================================================================================================================

The process of binding "data" and corresponding "methods" into a single unit is nothing but "Encapsulation".
Ex:
	class Student {
		data members
			+
		methods (behavior)
	}
	above example is for Encapsulation.
	
If any component follows "Data hiding" and "Abstraction", such type of component is said to be "Encapsulated" component.
		 ______________________________________________
        |                                              |  
		|	Encapsulation = Data hiding + Abstraction. |
        |______________________________________________|
        
        
  public class Account {
  	private double balance;
  	
  	public double getBalance() {
  		//Validation
  		return balance;
  	}
  	
  	public void setBalance(double balance) {
  		//validation
  		this.balance = balance;
  	}
  }

  The main advantages of Encapsulation are:
  	I.		We can achieve "Security".
  	II.		Enhancement will become easy.
  	III.	It improves maintainability of the application.
  	
  The main advantage of "Encapsulation" we can achieve "Security" but the main disadvantage of "Encapsulation" is it increases length of the code and slow down the execution time.
  
  
==============================================================================================================================================================================
																	TIGHTLY ENCAPSULATED CLASS
==============================================================================================================================================================================

A class is said to be "Tightly Encapsulated", if and only if each and every variable declared as "private" whether class contain corresponding getter and setter methods or not and 
whether these methods are declared as public or not. These thing we are not required to check. 

	public class Account {
		private double balance;
		
		public double getBalance() {
			return balance;
		}
	}

	
Q.) which of the following classes are tightly encapsulated?
A.)	class A {
		private int x = 10;
	}
	
	class B extends A {
		int y = 20;
	}
	
	class C extends A {
		private int z = 30;
	}
	
	class A and C are "Tightly Encapsulated"
	
	
Q.) which of the following classes are tightly encapsulated?

	class A {
		int x = 10;
	}
	class B extends A {
		private int y = 20;
	}
	class C extends B {
		private int z = 30;
	}
	
	None of these are "Tightly Encapsulated".
	If the parent class is not "Tightly Encapsulated", then none of its child class is "Tightly Encapsulated".